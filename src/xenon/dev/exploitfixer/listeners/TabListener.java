/*
 *     Copyright (C) 2021  EhSol
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package xenon.dev.exploitfixer.listeners;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketContainer;
import com.comphenix.protocol.events.PacketEvent;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.entity.Player;
import org.bukkit.plugin.Plugin;

import java.util.UUID;
import java.util.WeakHashMap;

public class TabListener extends PacketAdapter {

    private final WeakHashMap<UUID, Long> punishments = new WeakHashMap<>();

    public TabListener(Plugin plugin, Iterable<PacketType> types) {
        super(plugin, types);
    }

    @Override
    public void onPacketSending(PacketEvent event) {

        if (punishments.containsKey(event.getPlayer().getUniqueId())) {
            long time = punishments.get(event.getPlayer().getUniqueId());
            if (System.currentTimeMillis() < time) {
                event.setCancelled(true);
            }
        }
    }

    @Override
    public void onPacketReceiving(PacketEvent event) {

        if (event.getPacketType() != PacketType.Play.Client.TAB_COMPLETE) return;

        PacketContainer packet = event.getPacket();
        Player player = event.getPlayer();
        String message = packet.getStrings().readSafely(0);

        if (message.contains("to for(i=0;i<256;i++)") ||
                message.contains("to for(i=0;i<256;i++){for(j=0;j<256;j++){for(k=0;k<256;k++){for(l=0;l<256;l++){ln(pi)}}}}")) {
            event.setCancelled(true);
            punishments.put(player.getUniqueId(), System.currentTimeMillis() + plugin.getConfig().getLong("crash-time"));
        }

    }
}
